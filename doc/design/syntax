
\\ root is an untyped collection

\\ C++-style comments.. with \ instead of /
\* yeehaw *\

\\ can contain inner '-', but not leading or trailing
\\ cannot lead with number
this.is-a_freeform8string1
"quoted"
```
r
  a
    w
```

1 \\ integer
1.0 \\ floating-point
1unit_type \\ unit type follows numeric value

\\ currency value
	\\ decimal places hint minor unit (specified unit can be used to adjust/validate)
	\\ storage value is scaled by 10^exponent
	\\ currency sign and unit required
	\\ value is signed
	¤1x \\ -> value = 1, exponent = 0
	¤+1x \\ -> value = 1, exponent = 0
	¤-1x \\ -> value = -1, exponent = 0
	¤4.00x \\ -> value = 400, exponent = 2

\\ time (loose ISO 8601)
	15:30:45 \\ clock/relative time
	15:30 \\ seconds can be unspecified, but hours and minutes must be specified
	+00:02:30 \\ explicit duration

	2015-09-24 \\ date
	09-24 \\ date, context-relative to: year
	24T \\ date, context-relative to: year and month
	-0004-01-01 \\ BCE date

	2015-09-24T15:30:45 \\ fully-specified date
	09-24T15:30 \\ combined, context-relative to: year
	24T15:30 \\ combined, context-relative to: year and month

	\\ time zones
	15:30Z \\ UTC ("Zulu time"/"zero")
	15:30+01 \\ +01h00m
	15:30+02:30 \\ +02h30m
	15:30-04:00
	24Z \\ date, context-relative to: year and month, UTC
	24T-04:00

\\ time resolution is in seconds.
\\ times that do not specify a timezone are context-relative.
\\ if only the day is specified, the T marker must be present to disambiguate it;
\\ thus, an integer value cannot be constructed with the unit type "T".
\\ the Gregorian calendar is used for calendar dates.

\\ times of any specification completeness can be considered durations relative
\\ to 0001-01-01T00:00:00Z (the beginning instant of the Common Era); the values
\\ thereof are not required to be within the bounds of the Gregorian calendar
\\ and clock time. this is up to the governing system (i.e., contextual). sub-
\\ orders should be normalized to higher orders regardless (thus, 00:61:63 =
\\ 01:02:03), instead of retaining raw form.

\\ value markers (left-leaning):
	? \\ uncertain
	G~ \\ guess
	~ \\ approximate, maybe less than (sense intensified by repetition)
	^ \\ approximate, maybe more than (sense intensified by repetition)

\\ ~ and ^ can be repeated up to two times (a 0-3 scale)
\\ ? and ~ and ^ are valid without a value part (e.g.: ?, x[^^], ~~~)
\\ ~ and ^ are mutually exclusive
\\ ? and G~ are mutually exclusive
\\ G~ cannot be applied to null

\\ operators:
	x = y \\ name object
	x + y \\ addition; unary: positive
	x - y \\ subtraction (requires whitespace separation if between two strings); unary: negative
	x * y \\ multiplication
	x / y \\ division ("alternative measurement" in quantity)

\\ operators form an expression object, a type of collection

\\ sources (IDs must be numbers from [1, 0xFFFF] (inclusive))
	glitter$1 \\ source ID (1)
	glitter$1$2 \\ source ID (1) and sub-source ID (2)
	\\ uncertainty marker only applies here
	x$?1
	x$1$?

str{a, b} \\ sub-objects; str is the string value of the object

glitter[~10g] \\ quantity: single-valued sub-object
x[1u / 42g] \\ '/' forms an expression, but is used in this context to mean "alternative measurement"
x[1u, 2u] \\ quantity object is expanded to a collection when multiple values are specified
x{d = "ghosts"}[^^^374ghost-grams]

\\ terminators are ',', ';', and '\n'
{
	w, x; y
	z
}

\\ tags
	x:name
	x:~~markers
	y:name{} \\ comes before collection
	z:name[1] \\ comes before quantity
	:name \\ can tag a value-less object
	:collection("goats", x = 4) \\ tags can be collections
	u:v(w:x()){y}[z]

\\ basic composition
\\ ! means a singular match where at least one of the !-marked elements must occur

Elements = {

Identifier = [a-zA-Z_\.][a-zA-Z0-9_\.\-]*[a-zA-Z0-9_\.]+
Integer = [\-+]? [0-9]+
DecimalNumber = [\-+]? [0-9]* \.? [0-9]+
DecimalNumberWithExponent = DecimalNumber ([eE][\-+]? [0-9]* \.? [0-9]+)?
Unit = Identifier
Null = "null"
Boolean = "false" | "true"

Operator = [+\-*/]
ValueMarkers = ("?" | "G~")? | ("~" | "~~" | "~~~" | "^" | "^^" | "^^^")?

Name = Identifier "="
TagName = ":" Identifier
Tag = ValueMarkers? TagName TagChildren?
PreTags = Tag+
PostTags = Tag+
TagChildren = "(" Object* ")"
Children = "{" Object* "}"
Quantity = "[" Object* "]"

SourceMarker = "$" [0-9]*
Source = SourceMarker
SubSource = SourceMarker
Sources = Source? SubSource?

ValueConstant = Null | Boolean
ValueNumber = (Integer | DecimalNumberWithExponent) Unit?
ValueCurrency = "¤" DecimalNumber Unit
ValueString = Identifier | "\"" (.*|\\\")* "\"" | "```" [.\s\n]* "```"
ValueExpression = "(" (NamelessObject Operator)*  NamelessObject ")" | (NamelessObject Operator)* NamelessObject
Value = ValueConstant | ValueNumber | ValueCurrency | ValueString | ValueExpression

NamelessObject = ValueMarkers! Value! Sources! PreTags! Children! PostTags? Quantity?
Object = Name? NamelessObject

}
